// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: messages/auth.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthentifiationServiceClient is the client API for AuthentifiationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthentifiationServiceClient interface {
	SignUpService(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupRespone, error)
	LoginService(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UserHomeService(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error)
}

type authentifiationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthentifiationServiceClient(cc grpc.ClientConnInterface) AuthentifiationServiceClient {
	return &authentifiationServiceClient{cc}
}

func (c *authentifiationServiceClient) SignUpService(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupRespone, error) {
	out := new(SignupRespone)
	err := c.cc.Invoke(ctx, "/messages.AuthentifiationService/SignUpService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentifiationServiceClient) LoginService(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/messages.AuthentifiationService/LoginService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authentifiationServiceClient) UserHomeService(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, "/messages.AuthentifiationService/UserHomeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthentifiationServiceServer is the server API for AuthentifiationService service.
// All implementations must embed UnimplementedAuthentifiationServiceServer
// for forward compatibility
type AuthentifiationServiceServer interface {
	SignUpService(context.Context, *SignupRequest) (*SignupRespone, error)
	LoginService(context.Context, *LoginRequest) (*LoginResponse, error)
	UserHomeService(context.Context, *HomeRequest) (*HomeResponse, error)
	mustEmbedUnimplementedAuthentifiationServiceServer()
}

// UnimplementedAuthentifiationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthentifiationServiceServer struct {
}

func (UnimplementedAuthentifiationServiceServer) SignUpService(context.Context, *SignupRequest) (*SignupRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpService not implemented")
}
func (UnimplementedAuthentifiationServiceServer) LoginService(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginService not implemented")
}
func (UnimplementedAuthentifiationServiceServer) UserHomeService(context.Context, *HomeRequest) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeService not implemented")
}
func (UnimplementedAuthentifiationServiceServer) mustEmbedUnimplementedAuthentifiationServiceServer() {
}

// UnsafeAuthentifiationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthentifiationServiceServer will
// result in compilation errors.
type UnsafeAuthentifiationServiceServer interface {
	mustEmbedUnimplementedAuthentifiationServiceServer()
}

func RegisterAuthentifiationServiceServer(s grpc.ServiceRegistrar, srv AuthentifiationServiceServer) {
	s.RegisterService(&AuthentifiationService_ServiceDesc, srv)
}

func _AuthentifiationService_SignUpService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentifiationServiceServer).SignUpService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AuthentifiationService/SignUpService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentifiationServiceServer).SignUpService(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthentifiationService_LoginService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentifiationServiceServer).LoginService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AuthentifiationService/LoginService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentifiationServiceServer).LoginService(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthentifiationService_UserHomeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthentifiationServiceServer).UserHomeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AuthentifiationService/UserHomeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthentifiationServiceServer).UserHomeService(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthentifiationService_ServiceDesc is the grpc.ServiceDesc for AuthentifiationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthentifiationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.AuthentifiationService",
	HandlerType: (*AuthentifiationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpService",
			Handler:    _AuthentifiationService_SignUpService_Handler,
		},
		{
			MethodName: "LoginService",
			Handler:    _AuthentifiationService_LoginService_Handler,
		},
		{
			MethodName: "UserHomeService",
			Handler:    _AuthentifiationService_UserHomeService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/auth.proto",
}
